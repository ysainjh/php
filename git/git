git 创建版本库
mkdir learngit
cd learngit

git init  //通过git init命令把这个目录变成Git可以管理的仓库（初始化一个git仓库）

git add 文件名  //文件添加到仓库
git commit -m '' 文件名  //提交到仓库

git status //获取当前仓库状态
git diff 文件名  //文件修改前后差异

git log //显示提交日志
        加上 --pretty=oneline 参数，日志显示一行
git reflog用来记录你的每一次命令（可以查找版本号）

---------------------git reset 版本回退----------------
git reset 版本回退：
    当前版本是HEAD，也就是最新的提交,
    上一个版本就是HEAD^，
    上上一个版本就是HEAD^^。
git reset --hard HEAD^   即往前回退一个版本，回退完了后工作区就是上一个版本的代码了，并且是clean的。（工作区和缓冲区都干净了）
git reset --hard 版本号
版本回退之后，顺便把工作区的文件也更新了，工作区文件也就是回退到那个版本的修改

git reset --soft HEAD^   往前回退一个版本，并且将这次错误的提交的代码改动，放在暂存区里。（回退上上个版本，本次版本放到暂存区里）
    配套：git restore --staged <文件>...  取消暂存

git reset HEAD^  往前回退一个版本，并且将这次错误的提交的代码改动，放在工作区里。 （回退上上个版本，本次版本放到工作区里）
    配套：git restore <文件>  丢弃工作区的改动
         或者
         git checkout <文件>

执行完git reset 之后，强制推送至仓库（版本回退）：
git push origin HEAD --force  强推送至远程仓库，回退版本

---------------------git reset 回退暂存区至工作区----------------
git add 把文件提交到暂存区
    从暂存区撤回：git reset <HEAD> 文件

git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


git rm 从版本库中删除文件
    git checkout 文件

-----------------------git 分支---------------------------
git branch -b 分支 创建并且切换到新分支
git branch 分支 切换分支
git branch 命令会列出所有分支，当前分支前面会标一个*号

合并分支至master
git checkout master
git merge 开发分支

git merge 分支名称 命令用于合并指定分支到当前分支

git branch -d 分支  删除分支



---------------------git 解决冲突--------------------------





