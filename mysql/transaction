mysql 事务
事务就是要保证一组数据库操作，要么全部成功，要么全部失败。
在 MySQL 中，事务支持是在引擎层实现的。MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务。

InnoDB引擎事务实现：

隔离性与隔离级别
事务ACID(Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）
当数据库上有多个事务同时执行的时候，就可能出现
脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，

为了解决这些问题，就有了"隔离级别"：
在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。

SQL 标准的事务隔离级别包括：
读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）

读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。
读提交：一个事务提交之后，它做的变更才会被其他事务看到。
可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。
        当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。
串行化：顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。
      当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。

在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。
在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。
在“读提交”隔离级别下，这个视图是在每个SQL语句开始执行的时候创建的。
“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；
而“串行化”隔离级别下直接用加锁的方式来避免并行访问。


事务隔离的实现
“可重复读”的事务隔离机制实现
在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。


事务的启动方式
1、显式启动事务语句， begin 或 start transaction。提交语句是 commit，回滚语句是 rollback。
2、set autocommit=0，这个命令会将这个线程的自动提交关掉。
意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。





select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60
